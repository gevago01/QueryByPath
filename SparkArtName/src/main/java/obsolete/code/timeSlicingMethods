private static List<Integer> sliceNofSegments(JavaRDD<CSVRecord> records, int nofVerticalSlices) {
        JavaRDD<Integer> roadSegments = records.map(new ProjectRoadSegments()).distinct().sortBy(new Function<Integer, Integer>() {
            @Override
            public Integer call(Integer v1) throws Exception {
                return v1;
            }
        }, true, 1);
        long nofSegments = roadSegments.count();
//        roadSegments.zipWithIndex().
        JavaPairRDD<Long, Integer> roadSegmentswIndex =
                roadSegments.zipWithIndex().mapToPair(new PairFunction<Tuple2<Integer, Long>, Long, Integer>() {
                    @Override
                    public Tuple2<Long, Integer> call(Tuple2<Integer, Long> t) throws Exception {
                        //t._2() is the road segment
                        return new Tuple2<>(t._2(), t._1());
                    }
                });
//        roadSegmentswIndex.foreach(t -> System.out.println(t));

        long bucketCapacity = nofSegments / nofVerticalSlices;
        List<Long> indices = new ArrayList<>();
        for (long i = 0; i < nofSegments - 1; i += bucketCapacity) {
            indices.add(i);
        }
        indices.add(nofSegments - 1);
        List<Integer> roadIntervals = new ArrayList<>();
        for (Long l : indices) {
            roadIntervals.add(roadSegmentswIndex.lookup(l).get(0));
        }
        return roadIntervals;
    }



private static List<Integer> sliceNofSegments2(JavaRDD<CSVRecord> records, int nofVerticalSlices) {
        JavaRDD<Integer> roadSegments = records.map(new ProjectRoadSegments()).distinct().sortBy(new Function<Integer, Integer>() {
            @Override
            public Integer call(Integer v1) throws Exception {
                return v1;
            }
        }, true, 1);

        int min = roadSegments.min(new IntegerComparator());
        int max = roadSegments.max(new IntegerComparator());

        long roadRange = max - min;

        long interval = roadRange / nofVerticalSlices;

        List<Integer> roadIntervals = new ArrayList<>();
        for (int i = min; i < max; i += interval) {
            roadIntervals.add(i);
        }
        roadIntervals.remove(roadIntervals.size() - 1);
        roadIntervals.add(max);


        return roadIntervals;
    }