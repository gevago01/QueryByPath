        JavaPairRDD<Integer, Trie> trieRDD =
                trajectoryDataset.groupByKey(). mapValues(new Function<Iterable<Trajectory>, Trie>() {
                    @Override
                    public Trie call(Iterable<Trajectory> trajectories) throws Exception {
                        Trie trie = new Trie();

                        for (Trajectory traj : trajectories) {
                            trie.insertTrajectory2(traj);
                            trie.setVerticalID(traj.getVerticalID());
//                            trie.setStartingRoadSegment(traj.getStartingRS());
                        }
                        return trie;
                    }
                });

    JavaPairRDD<Integer, Trie> trieRDD = trajectoryDataset.groupByKey().mapValues(new Function<Iterable<Trajectory>, Trie>() {
            @Override
            public Trie call(Iterable<Trajectory> trajectories) throws Exception {
                Trie trie = new Trie();

                for (Trajectory traj : trajectories) {
                    trie.insertTrajectory2(traj);
                    trie.setHorizontalTrieID(traj.getHorizontalID());
                }
                return trie;
            }
        });


     JavaPairRDD<Integer, Trie> trieDataset =
                trajectoryDataset.groupByKey().mapValues(new Function<Iterable<Trajectory>, Trie>() {
                    @Override
                    public Trie call(Iterable<Trajectory> trajectories) throws Exception {
                        Trie trie = new Trie();

                        for (Trajectory t : trajectories) {
                            trie.insertTrajectory2(t);
                            trie.timeSlice = t.timeSlice;
                        }

                        return trie;
                    }
                });



        //one way to avoid groupByKey
//        List<Integer> partitions=IntStream.range(0, nofVerticalSlices).boxed().collect(toList());
//        JavaRDD<Integer> partitionsRDD=sc.parallelize(partitions);
//        JavaPairRDD<Integer, Trie> emptyTrieRDD = partitionsRDD.mapToPair(new PairFunction<Integer, Integer, Trie>() {
//            @Override
//            public Tuple2<Integer, Trie> call(Integer partitionID) throws Exception {
//                Trie t=new Trie();
//                t.setVerticalID(partitionID);
//                return new Tuple2<>(partitionID, t);
//            }
//        });
//        JavaPairRDD<Integer, Trie> trieRDD=
//                emptyTrieRDD.join(trajectoryDataset).mapValues(new Function<Tuple2<Trie,Trajectory>, Trie>() {
//            @Override
//            public Trie call(Tuple2<Trie, Trajectory> v1) throws Exception {
//
//                v1._1().insertTrajectory2(v1._2());
//                return v1._1();
//            }
//        });